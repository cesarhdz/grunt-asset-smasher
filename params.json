{"name":"Grunt-asset-smasher","tagline":"Grunt plugin for asset-smasher","body":"# grunt-asset-smasher\r\n\r\n> Grunt plugin for [asset-smasher](http://jriecken.github.io/asset-smasher/)\r\n\r\nSee [the asset-smasher homepage](http://jriecken.github.io/asset-smasher/) for more details on usage of asset-smasher and how it works.\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.1` and asset-smasher `~0.3.0`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-asset-smasher --save-dev\r\n```\r\n\r\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-asset-smasher');\r\n```\r\n\r\n## The \"asset_smasher\" task\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `asset_smasher` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  asset_smasher: {\r\n    options: {\r\n      // asset-smasher options go here\r\n    }\r\n  },\r\n})\r\n```\r\n\r\n### Options\r\n\r\n#### options.outputTo\r\nType: `String`\r\nDefault value: No Default. This must be specified\r\n\r\nThe directory to output assets into\r\n\r\n#### options.paths\r\nType: `String[]`\r\nDefault value: `[process.cwd()]`\r\n\r\nAn array of asset paths\r\n\r\n#### options.only\r\nType: `String[]`\r\nDefault value: `['**/*.*']`\r\n\r\nArray of glob patterns for assets that should be output (other assets will be filtered out/not processed)\r\n\r\n#### options.prefix\r\nType: `String`\r\nDefault value: `''`\r\n\r\nPrefix to append to logical paths when constructing urls. use if output dir is not served from the root of your web app\r\n\r\n#### options.compress\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWhether to compress JavaScript and CSS assets\r\n\r\n#### options.hash\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWhether to output copies of the final assets with an MD5 hash of the contents appended to the file name (e.g. myasset-xxxxxxxxxxxxxxxxxxxx.js)\r\n\r\n#### options.gzip\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWhether to output a copy of the final assets gzipped\r\n\r\n#### options.hashVersion\r\nType: `String`\r\nDefault value: `1.0`\r\n\r\nChange this value if you want to invalidate all of your assets (the version is included when computing the hash value for an asset)\r\n\r\n#### options.helpers\r\nType: `Object`\r\nDefault value: `{}`\r\n\r\nHelpers/values to pass into transformers (e.g. the `ejs` transformer exposes these as local variables)\r\n\r\n#### options.amd\r\nType: `Boolean|Object`\r\nDefault value: `false`\r\n\r\nWhether to enable AMD module support. Either a boolean can be passed in, or an object of the form\r\n\r\n    {\r\n      baseLogicalPath: 'base/path' // The value defaults to '' and will be stripped off of all logical paths before constructing module ids\r\n    }\r\n\r\n#### options.verbose\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWhether verbose information should be printed out to stdout when compiling\r\n\r\n#### options.noclean\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWhether to prevent deletion of the output directory before compilation\r\n\r\n### Usage Examples\r\n\r\n#### Basic Options\r\n\r\nThis will compile all files in `my/assets` and output them to `output/dir`\r\n\r\n```js\r\ngrunt.initConfig({\r\n  asset_smasher: {\r\n    options: {\r\n      paths: ['my/assets'],\r\n      outputTo: 'output/dir'\r\n    }\r\n  },\r\n})\r\n```\r\n\r\n#### More Advanced Options\r\n\r\nThis compiles only the manifest files in several asset paths, compresses the result, and creates hashed versions of the files.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  asset_smasher: {\r\n    options: {\r\n      paths: ['my/assets', 'my/otherassets'],\r\n      outputTo: 'output/dir',\r\n      only: ['**/*.mf'],\r\n      prefix: 'assets',\r\n      compress: true,\r\n      hash: true\r\n    }\r\n  },\r\n})\r\n```\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n## Release History\r\n\r\n### 0.1 (June 20, 2013)\r\n\r\nInitial release - Compatible with `asset-smasher` 0.3.x\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}